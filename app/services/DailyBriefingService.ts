/**
 * Daily Briefing Service for Alexis Best (AI Executive Assistant)
 * Generates morning and evening briefings for Dee Davis with key metrics, priorities, and follow-ups
 */

import { generateFollowUpEmail } from '../data/followUpTemplates';
import {
  CalendarEvent,
  calendarReminderService,
} from './CalendarReminderService';
import { emailMonitoringService } from './EmailMonitoringService';

export interface DailyBriefing {
  id: string;
  date: string;
  type: 'morning' | 'evening';
  generatedAt: string;
  sections: {
    greeting: string;
    overnightSummary?: string;
    todaysPriorities: string[];
    urgentMatters: string[];
    calendarToday: CalendarEvent[];
    metricsSnapshot: {
      fleetflow?: string;
      depointe?: string;
      freightFirstDirect?: string;
      keyWins?: string[];
    };
    pendingFollowUps: PendingFollowUp[];
    tomorrowsPriorities?: string[];
    accomplishments?: string[];
    overnightWatch?: string[];
  };
  generatedBy: string;
}

export interface PendingFollowUp {
  id: string;
  type: 'bpa' | 'rfp' | 'customer' | 'contract';
  title: string;
  solicitationNumber?: string;
  submittedDate: string;
  followUpDueDate: string;
  daysUntilDue: number;
  contactEmail: string;
  status: 'pending' | 'overdue' | 'response_received';
  priority: 'critical' | 'high' | 'medium' | 'low';
  emailTemplate?: {
    subject: string;
    body: string;
    bccAddresses: string[];
  };
  actions: {
    label: string;
    action: 'send_email' | 'postpone' | 'mark_received' | 'view_details';
  }[];
}

class DailyBriefingService {
  /**
   * Generate morning briefing
   */
  generateMorningBriefing(): DailyBriefing {
    const now = new Date();
    const dateStr = now.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    const greeting = this.getGreeting();
    const upcomingEvents = calendarReminderService.getUpcomingEvents(1); // Today's events
    const pendingFollowUps = this.getPendingFollowUps();

    const briefing: DailyBriefing = {
      id: `briefing-morning-${Date.now()}`,
      date: dateStr,
      type: 'morning',
      generatedAt: now.toISOString(),
      sections: {
        greeting: `${greeting} Dee - ${dateStr}`,
        overnightSummary: this.generateOvernightSummary(),
        todaysPriorities: this.generateTodaysPriorities(
          upcomingEvents,
          pendingFollowUps
        ),
        urgentMatters: this.generateUrgentMatters(pendingFollowUps),
        calendarToday: upcomingEvents,
        metricsSnapshot: this.generateMetricsSnapshot(),
        pendingFollowUps,
      },
      generatedBy: 'alexis-executive-023',
    };

    console.log('🌅 Morning briefing generated by Alexis Best');
    return briefing;
  }

  /**
   * Generate evening briefing
   */
  generateEveningBriefing(): DailyBriefing {
    const now = new Date();
    const dateStr = now.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    const tomorrowsEvents = calendarReminderService.getUpcomingEvents(1);
    const pendingFollowUps = this.getPendingFollowUps();

    const briefing: DailyBriefing = {
      id: `briefing-evening-${Date.now()}`,
      date: dateStr,
      type: 'evening',
      generatedAt: now.toISOString(),
      sections: {
        greeting: `🌙 End of Day Summary - ${dateStr}`,
        accomplishments: this.generateAccomplishments(),
        metricsSnapshot: this.generateMetricsSnapshot(),
        tomorrowsPriorities: this.generateTomorrowsPriorities(
          tomorrowsEvents,
          pendingFollowUps
        ),
        pendingFollowUps: pendingFollowUps.filter((f) => f.daysUntilDue <= 7),
        calendarToday: tomorrowsEvents,
        overnightWatch: this.generateOvernightWatch(),
      },
      generatedBy: 'alexis-executive-023',
    };

    console.log('🌙 Evening briefing generated by Alexis Best');
    return briefing;
  }

  /**
   * Get pending follow-ups
   */
  getPendingFollowUps(): PendingFollowUp[] {
    const followUps: PendingFollowUp[] = [];

    // Get government contract follow-ups from calendar events
    const governmentEvents =
      calendarReminderService.getEventsByCategory('follow_up');

    governmentEvents.forEach((event) => {
      if (event.status !== 'pending') return;

      const daysUntil = calendarReminderService.getDaysUntilEvent(event.id);
      if (daysUntil === null) return;

      const followUp: PendingFollowUp = {
        id: event.id,
        type: event.relatedEntity?.type || 'contract',
        title: event.title,
        solicitationNumber: event.metadata?.solicitationNumber,
        submittedDate: event.metadata?.submissionDate || 'Unknown',
        followUpDueDate: event.startDate,
        daysUntilDue: daysUntil,
        contactEmail: event.metadata?.contactEmail || 'Unknown',
        status: daysUntil < 0 ? 'overdue' : 'pending',
        priority:
          daysUntil <= 3 ? 'critical' : daysUntil <= 7 ? 'high' : 'medium',
        actions: [
          { label: 'Send Email', action: 'send_email' },
          { label: 'Postpone', action: 'postpone' },
          { label: 'Mark Received', action: 'mark_received' },
          { label: 'View Details', action: 'view_details' },
        ],
      };

      // Generate email template if needed
      if (event.metadata?.templateId && daysUntil <= 0) {
        const tokenValues: Record<string, string> = {
          '{{CONTACT_NAME}}': 'Contracting Officer',
          '{{SUBMISSION_DATE}}': event.metadata.submissionDate,
          '{{SOLICITATION_NUMBER}}': event.metadata.solicitationNumber,
          '{{DAYS_SINCE_SUBMISSION}}': String(Math.abs(daysUntil)),
        };

        const emailTemplate = generateFollowUpEmail(
          event.metadata.templateId,
          tokenValues
        );
        if (emailTemplate) {
          followUp.emailTemplate = emailTemplate;
        }
      }

      followUps.push(followUp);
    });

    // Sort by days until due (most urgent first)
    return followUps.sort((a, b) => a.daysUntilDue - b.daysUntilDue);
  }

  /**
   * Generate greeting based on time of day
   */
  private getGreeting(): string {
    const hour = new Date().getHours();
    if (hour < 12) return '🌅 Good Morning';
    if (hour < 17) return '☀️ Good Afternoon';
    return '🌙 Good Evening';
  }

  /**
   * Generate overnight summary
   */
  private generateOvernightSummary(): string {
    // This would pull from actual overnight activities
    return 'All systems operational. No critical alerts overnight.';
  }

  /**
   * Generate today's priorities
   */
  private generateTodaysPriorities(
    events: CalendarEvent[],
    followUps: PendingFollowUp[]
  ): string[] {
    const priorities: string[] = [];

    // Add urgent follow-ups
    const urgentFollowUps = followUps.filter((f) => f.daysUntilDue <= 0);
    urgentFollowUps.forEach((followUp) => {
      priorities.push(
        `📧 URGENT: Send follow-up email for ${followUp.title} (${Math.abs(followUp.daysUntilDue)} days ${followUp.daysUntilDue < 0 ? 'overdue' : 'until due'})`
      );
    });

    // Add today's calendar events
    events.forEach((event, index) => {
      if (index < 3) {
        // Top 3 events
        priorities.push(`📅 ${event.title}`);
      }
    });

    // Add default priorities if none found
    if (priorities.length === 0) {
      priorities.push('Review pending contracts and opportunities');
      priorities.push('Monitor DEPOINTE operations and metrics');
      priorities.push('Check for new government solicitations');
    }

    return priorities;
  }

  /**
   * Generate urgent matters
   */
  private generateUrgentMatters(followUps: PendingFollowUp[]): string[] {
    const urgent: string[] = [];

    // Critical follow-ups
    const criticalFollowUps = followUps.filter(
      (f) => f.priority === 'critical'
    );
    criticalFollowUps.forEach((followUp) => {
      urgent.push(
        `🚨 ${followUp.title} - Follow-up ${followUp.daysUntilDue < 0 ? 'OVERDUE' : `due in ${followUp.daysUntilDue} day(s)`}`
      );
    });

    // Email monitoring alerts
    const alerts = emailMonitoringService.getAllAlerts();
    const recentAlerts = alerts.filter((alert) => {
      const alertDate = new Date(alert.triggeredAt);
      const hoursSince = (Date.now() - alertDate.getTime()) / (1000 * 60 * 60);
      return hoursSince < 24;
    });

    if (recentAlerts.length > 0) {
      urgent.push(`📧 ${recentAlerts.length} email alert(s) in last 24 hours`);
    }

    return urgent;
  }

  /**
   * Generate metrics snapshot
   */
  private generateMetricsSnapshot(): DailyBriefing['sections']['metricsSnapshot'] {
    // This would pull from actual business metrics
    return {
      fleetflow: 'Platform operational, monitoring active users',
      depointe: 'Active freight operations, monitoring load completions',
      freightFirstDirect:
        'Dispatch services running, monitoring carrier performance',
      keyWins: [],
    };
  }

  /**
   * Generate tomorrow's priorities
   */
  private generateTomorrowsPriorities(
    events: CalendarEvent[],
    followUps: PendingFollowUp[]
  ): string[] {
    const priorities: string[] = [];

    // Add follow-ups due tomorrow
    const tomorrowFollowUps = followUps.filter((f) => f.daysUntilDue === 1);
    tomorrowFollowUps.forEach((followUp) => {
      priorities.push(`📧 Prepare follow-up for ${followUp.title}`);
    });

    // Add tomorrow's events
    events.forEach((event, index) => {
      if (index < 3) {
        priorities.push(`📅 ${event.title}`);
      }
    });

    return priorities;
  }

  /**
   * Generate accomplishments
   */
  private generateAccomplishments(): string[] {
    // This would pull from actual completed tasks
    return [
      '✅ Daily operations monitored and running smoothly',
      '✅ All communications processed',
      '✅ Calendar and follow-ups maintained',
    ];
  }

  /**
   * Generate overnight watch items
   */
  private generateOvernightWatch(): string[] {
    return [
      'Monitoring for emergency notifications',
      'Tracking any urgent email responses',
      'System health monitoring active',
    ];
  }
}

// Export singleton instance
export const dailyBriefingService = new DailyBriefingService();
